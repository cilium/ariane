---
name: Setup docker, gcloud sdk and deploy to GCP App Engine
description: Sets up Google Cloud SDK and Docker for use in GitHub Actions workflows.
inputs:
  environment:
    description: 'The deployment environment (e.g., testing, staging, production).'
    required: true
    default: 'testing'
  github-api-url:
    description: 'The GitHub API URL to use.'
    required: false
    default: 'https://api.github.com'
  service:
    description: 'The GCP service name to deploy to.'
    required: false
    default: 'default'
  vault-url:
    description: 'The URL of the HashiCorp Vault server.'
    required: true
  vault-namespace:
    description: 'The Vault namespace to use.'
    required: true
  artifactory-username:
    description: 'The username for Artifactory Docker registry.'
    required: true
  artifactory-password:
    description: 'The password for Artifactory Docker registry.'
    required: true
runs:
  using: "composite"
  steps:
    - name: Get Secrets from Vault
      uses: hashicorp/vault-action@4c06c5ccf5c0761b6029f56cfb1dcf5565918a3b # v3.4.0
      env:
        VAULT_SECRETS_PATH: secret/data/devops/${{ github.repository }}/${{ inputs.environment }}
      with:
        url: ${{ inputs.vault-url }}
        method: jwt
        namespace: ${{ inputs.vault-namespace }}
        secrets: |
          ${{ env.VAULT_SECRETS_PATH }} gcp_project_id;
          ${{ env.VAULT_SECRETS_PATH }} gcp_service_account;
          ${{ env.VAULT_SECRETS_PATH }} gcp_workload_identity_provider;
          ${{ env.VAULT_SECRETS_PATH }} gh_app_integration_id;
          ${{ env.VAULT_SECRETS_PATH }} gh_app_webhook_secret;
          ${{ env.VAULT_SECRETS_PATH }} gh_app_private_key;

    - name: Generate server configuration
      shell: bash
      run: |
        TAG=$(date +%Y%m%d%H%M)-$(git log -1 --pretty=%h)
        echo "TAG=${TAG}" >> $GITHUB_ENV

        GH_APP_PRIVATE_KEY_ESCAPED=$(echo "${{ env.GH_APP_PRIVATE_KEY }}" | sed ':a;N;$!ba;s/\n/\\n/g')
        echo "::add-mask::${GH_APP_PRIVATE_KEY_ESCAPED}"

        echo "GCP_IMAGE_NAME=${{ inputs.service == 'default' && 'ariane' || inputs.service }}" >> $GITHUB_ENV

        cat << EOF | tee -a app.yaml
        service: ${{ inputs.service }}
        env_variables:
          ARIANE_VERSION: ${TAG}
          ARIANE_SERVER_PORT: 8080
          ARIANE_SERVER_ADDRESS: "0.0.0.0"
          ARIANE_RUN_DELAY: 30s
          GITHUB_V3_API_URL: ${{ inputs.github-api-url }}
          GITHUB_APP_INTEGRATION_ID: ${{ env.GH_APP_INTEGRATION_ID }}
          GITHUB_APP_WEBHOOK_SECRET: ${{ env.GH_APP_WEBHOOK_SECRET }}
          GITHUB_APP_PRIVATE_KEY: ${GH_APP_PRIVATE_KEY_ESCAPED}
        EOF

    - name: Log in to GCP
      uses: google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093 # v3.0.0
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@aa5489c8933f4cc7a4f7d45035b3b1440c9c10db # v3.0.1

    - name: Setup Docker
      uses: docker/setup-docker-action@3fb92d6d9c634363128c8cce4bc3b2826526370a # v4.4.0

    - name: Docker login to devhub-cloud
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
      with:
        registry: artifactory.devhub-cloud.cisco.com
        username: ${{ inputs.artifactory-username }}
        password: ${{ inputs.artifactory-password }}

    - name: Cache Docker images
      id: cache-docker-images
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: /var/lib/docker/overlay2
        key: docker-images-${{ hashFiles('**/Dockerfile') }}

    - name: Pull Docker images
      if: steps.cache-docker-images.outputs.cache-hit != 'true'
      shell: bash
      run: |
        docker pull golang:1.25
        docker pull gcr.io/distroless/static-debian11

    - name: Docker Login
      shell: bash
      run: gcloud auth configure-docker

    - name: Build Docker image
      id: build-image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ github.workspace }}
        file: Dockerfile
        push: true
        tags: |
          gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_IMAGE_NAME }}:${{ env.TAG }}

    - name: Deploy to GCP App Engine
      shell: bash
      run: |
        gcloud app deploy --quiet \
          --image-url=gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_IMAGE_NAME }}:${{ env.TAG }} \
          ./app.yaml

    - name: Delete old versions
      shell: bash
      run: |
        gcloud app versions list --service ${{ inputs.service }} --format "value(version.id)" --sort-by "~version.createTime" \
          | tail -n +5 \
          | xargs -r gcloud app versions delete --service ${{ inputs.service }}
